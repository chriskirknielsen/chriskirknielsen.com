$theme-constants: get-token('constants');
$theme-vars: get-token('vars');
$theme-schemes: get-token('schemes');
$theme-scheme-light: map-get($theme-schemes, 'light');
$theme-scheme-dark: map-get($theme-schemes, 'dark');
$theme-scheme-common-vars: get-token('schemeCommonVars');
$theme-scheme-common-vars-resettable: map-get($theme-scheme-common-vars, 'vars-resettable');
$theme-themes: get-token('themes');
$theme-fontstack: get-token('fontstack');
$theme-easing: get-token('easing');

// DRY theme switch: https://css-tricks.com/a-dry-approach-to-color-themes-in-css/

:root {
	// Disable all themes by default
	@each $theme-key in map-keys($theme-themes) {
		--T-#{$theme-key}: var(--OFF);
	}

	// Define base scheme's common variables
	@include generate-theme-vars($theme-scheme-common-vars, $prefix: '_t', $exclude: ('colors'));

	// In addition to the common values, list the colours to be used
	$scheme-colors: ();
	// Both schemes have the same shape fo the colors property, so we can iterate over one and apply the toggle for both.
	$scheme: 'dark';
	$scheme-key: map-get($theme-schemes, $scheme);
	$scheme-themes: map-values($theme-schemes);
	$scheme-values: map-get($theme-themes, $scheme-key);
	$scheme-vars: map-get($scheme-values, 'vars');
	$scheme-colors: map-get($scheme-values, 'colors');

	@each $scheme-var-key, $value in $scheme-vars {
		$scheme-var-val: '';
		@each $scheme-theme-key in $scheme-themes {
			$value: map-deep-get($theme-themes, $scheme-theme-key, 'vars', $scheme-var-key);
			$scheme-var-val: $scheme-var-val + ' var(--T-#{$scheme-theme-key}, #{$value})';
		}
		--_t-#{$scheme-var-key}: #{$scheme-var-val};
	}

	@each $name, $weights in $scheme-colors {
		@each $weight in map-keys($weights) {
			$scheme-color-key: 'color-#{$name}-#{$weight}';
			$scheme-color-val: '';
			@each $scheme-theme-key in $scheme-themes {
				$value: map-deep-get($theme-themes, $scheme-theme-key, 'colors', $name, $weight);
				$scheme-color-val: $scheme-color-val + ' var(--T-#{$scheme-theme-key}, #{$value})';
			}
			// No underline prefix for colours, they are mandatory!
			--t-#{$scheme-color-key}: #{$scheme-color-val};
		}
	}

	// Add in global constants and variables
	@each $var-key, $var-value in $theme-constants {
		--C-#{$var-key}: #{$var-value};
	}
	@each $var-key, $var-value in $theme-vars {
		$val-with-fallback: 'var(--_t-#{$var-key}, #{$var-value})'; // Grab a theme-defined value if it exists, or fallback to the global value
		--t-#{$var-key}: #{$val-with-fallback};
	}

	// The data-attribute only shows up with JS enabled, overwriting the prefers-color-scheme MQs, so only set these to ON when no JS is active
	&:not([data-theme]) {
		@media screen and (prefers-color-scheme: light) {
			--T-#{$theme-scheme-light}: var(--ON);
		}
		@media screen and (prefers-color-scheme: dark) {
			--T-#{$theme-scheme-dark}: var(--ON);
		}
	}

	&[data-theme]:not([data-theme='#{$theme-scheme-light}']):not([data-theme='#{$theme-scheme-dark}']) {
		@each $scheme-var-key, $value in $theme-scheme-common-vars-resettable {
			--_t-#{$scheme-var-key}: initial; // Reset vars
		}
	}

	@each $theme-key, $theme-var-groups in $theme-themes {
		&[data-theme='#{$theme-key}'] {
			--T-#{$theme-key}: var(--ON);

			// If this isn't a default scheme, generate all the overwrite variables
			@if (index(map-values($theme-schemes), $theme-key) == null) {
				@include generate-theme-vars($theme-var-groups);
			}
		}
	}

	// Composed custom properties
	--cardblock-border-thickness: 1px;
	--cardblock-border-color: var(--t-heading-color);
	--cardblock-border: var(--cardblock-border-thickness) solid var(--cardblock-border-color);
}

$theme-constants: get-token('constants');
$theme-vars: get-token('vars');
$theme-schemes: get-token('schemes');
$theme-scheme-common-vars: get-token('schemeCommonVars');
$theme-themes: get-token('themes');
$theme-font-fallback: get-token('fontFallback');

// DRY theme switch: https://css-tricks.com/a-dry-approach-to-color-themes-in-css/

:root {
	// Disable all themes by default
	@each $theme-key in map-keys($theme-themes) {
		--THEME-#{$theme-key}: var(--OFF);
	}

	// Define base scheme variables
	@include generate-theme-vars($theme-scheme-common-vars, $prefix: '_theme', $exclude: ('colors'));

	// In addition to the common values, list the colours to be used
	$scheme-colors: ();
	// Both schemes have the same shape fo the colors property, so we can iterate over one and apply the toggle for both.
	$scheme: 'dark';
	$scheme-key: map-get($theme-schemes, $scheme);
	$scheme-themes: map-values($theme-schemes);
	$scheme-values: map-get($theme-themes, $scheme-key);
	$scheme-colors: map-get($scheme-values, 'colors');

	@each $name, $weights in $scheme-colors {
		@each $weight in map-keys($weights) {
			$scheme-color-key: 'color-#{$name}-#{$weight}';
			$scheme-color-val: '';
			@each $scheme-theme-key in $scheme-themes {
				$value: map-deep-get($theme-themes, $scheme-theme-key, 'colors', $name, $weight);
				$scheme-color-val: $scheme-color-val + ' var(--THEME-#{$scheme-theme-key}, #{$value})';
			}
			--theme-#{$scheme-color-key}: #{$scheme-color-val};
		}
	}

	// Add in global constants and variables
	@each $var-key, $var-value in $theme-constants {
		--site-#{$var-key}: #{$var-value};
	}
	@each $var-key, $var-value in $theme-vars {
		$val-with-fallback: 'var(--_theme-#{$var-key}, #{$var-value})'; // Grab a theme-defined value if it exists, or fallback to the global value
		--theme-#{$var-key}: #{$val-with-fallback};
	}
}

// The data-attribute only shows up with JS enabled, overwriting the prefers-color-scheme MQs, so only set these to ON when no JS is active
:root:not([data-theme]) {
	@media screen and (prefers-color-scheme: light) {
		--THEME-#{map-get($theme-schemes, 'light')}: var(--ON);
	}
	@media screen and (prefers-color-scheme: dark) {
		--THEME-#{map-get($theme-schemes, 'dark')}: var(--ON);
	}
}

@each $theme-key, $theme-var-groups in $theme-themes {
	:root[data-theme='#{$theme-key}'] {
		--THEME-#{$theme-key}: var(--ON);

		// If this isn't a default scheme, generate all the overwrite variables
		@if (index(map-values($theme-schemes), $theme-key) == null) {
			@include generate-theme-vars($theme-var-groups);
		}
	}
}

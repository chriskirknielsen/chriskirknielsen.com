@mixin generate-light-dark-vars($var, $light, $dark) {
	--#{$var}: var(--T-#{$theme-scheme-light}, #{$light}) var(--T-#{$theme-scheme-dark}, #{$dark});
}

@mixin generate-theme-vars($var-groups, $prefix: 't', $exclude: ()) {
	@each $theme-var-group, $theme-group-values in $var-groups {
		@if (index($exclude, $theme-var-group) == null) {
			@if $theme-var-group == 'fonts' {
				@each $name, $families in $theme-group-values {
					$stack: ();

					@each $family in $families {
						@if (is-list(map-deep-get(get-token('fontstack'), $family))) {
							$stack: append($stack, 'var(--fontstack-#{$family})', $separator: 'comma');
						} @else {
							$stack: append($stack, $family, $separator: 'comma');
						}
					}

					--#{$prefix}-font-#{$name}: #{zip($stack)};
				}
			}
			@if $theme-var-group == 'colors' {
				@each $name, $weights in $theme-group-values {
					@each $weight, $value in $weights {
						$theme-color-key: 'color-#{$name}-#{$weight}';
						--#{$prefix}-#{$theme-color-key}: #{$value};
					}
				}
			}
			@if ($theme-var-group == 'vars' or $theme-var-group == 'vars-resettable') {
				@each $var, $value in $theme-group-values {
					--#{$prefix}-#{$var}: #{$value};
				}
			}
		}
	}
}

@mixin above-medium {
	@media screen and (min-width: 46.25em) {
		@content; // 740px
	}
}
@mixin above-large {
	@media screen and (min-width: 71.25em) {
		@content; // 1140px
	}
}
@mixin _theme($selector, $context) {
	@at-root {
		#{$selector} {
			& #{$context} {
				@content;
			}
		}
	}
}

@mixin subgrid {
	// Until subgrid behaves properly in Safari (https://bugs.webkit.org/show_bug.cgi?id=245936), restricting subgrid to Firefox
	@-moz-document url-prefix() {
		@supports (grid-template-columns: subgrid) {
			@content;
		}
	}
}

@mixin default-schemes($section: false) {
	$section-selector: unquote(if($section != false, "[data-section='#{$section}']", ''));
	$root-selector: unquote("#{$section-selector}:is(:root:not([data-theme]), [data-theme='dusk'], [data-theme='dawn'])");

	@include _theme($root-selector, &) {
		@content;
	}
}
@mixin theme($key, $section: false) {
	$section-selector: unquote(if($section != false, "[data-section='#{$section}']", ''));
	$root-selector: unquote("#{$section-selector}[data-theme='#{$key}']");
	@if (type-of($key) == list) {
		$root-selector-list: ();
		@each $key-item in $key {
			$root-selector-list: append($root-selector-list, "#{$section-selector}[data-theme='#{$key-item}']");
		}
		$root-selector: unquote(#{zip($root-selector-list)});
	}

	@include _theme($root-selector, &) {
		@content;
	}
}

---
title: Designs
subtitle: A collection of posters and shirt designs I've made, available across multiple online shops.
summary: Shirt, poster and sticker designs by Christopher Kirk-Nielsen
bigboiButton: { url: '/designs.xml', icon: 'rss', label: 'Design Feed' }
rssFeedOverride: '/designs.xml'
---

{% set activeDesigns = designs | filterBoolProp('showInGallery') %}

<div class="u-textAlign-center">
	<p class="visually-hidden">Shops:</p>
	<ol class="inline-list | u-fontWeight-bold u-fontSize-smallest">
		{% for merchStore, merchUrl in metadata.merch %}
			<li><a href="{{ merchUrl | url }}">{{ merchStore }}</a>
		{% endfor %}
	</ol>
</div>

<hr>

<fieldset class="filtering" hidden>
	<script>document.querySelector('.filtering').hidden=false</script>
	<legend class="visually-hidden">Filter</legend>
	<div class="filtering-legend | u-fontWeight-bold" aria-hidden="true">Filter</div>

	<div class="filtering-item">
		<input type="radio" name="filter" class="visually-hidden" id="filter-all" value="" checked>
		<label for="filter-all" class="filtering-tag | button">All</label>
	</div>

	{% for tag in activeDesigns | pluck('tags') | flatten | unique | sort %}
	<div class="filtering-item">
		<input type="radio" name="filter" id="filter-{{ tag }}" class="visually-hidden" value="{{ tag | toLowercase }}">
		<label for="filter-{{ tag }}" class="filtering-tag | button">{{ tag }}</label>
	</div>
	{% endfor %}
</fieldset>

<div class="gridlist u-marginBlockStart-xl" data-filtered-list>
{% for design in activeDesigns %}
	{% set designPermalink = '/designs/' + design.slug + '/' | url %}
	{% set designAttrs %}
		id="{{ design.slug }}"
		data-filtered-item
		data-tags="{%- for tag in design.tags -%}
			{{ tag }}
			{%- if not loop.last %},{% endif -%}
		{%- endfor -%}"
		aria-hidden="false"
	{% endset %}
	{% setAsync "designVariant" -%}
		{% if design.variant %}
			<div class="cardblock-badge | spaced-items inlined-items">
				{% svg "arrow-bidir", { class: "inline-icon" } %}
				<span>Variant available</span>
			</div>
		{% endif %}
	{%- endsetAsync %}
	{% set designLinks %}
		<ul role="list" class="inline-list | u-marginBlockStart-auto u-fontSize-smallest">
			{%- for site, url in design.links %}
			<li>
				<a href="{{ url | url }}">
					<span class="visually-hidden">{{ design.name | striptags }} on</span>
					{{ site }}
				</a>
			</li>
			{% endfor -%}
		</ul>
	{% endset%}

    {% renderFile "griditem.njk" | incPath("components"), {
		gridItem: design,
		gridItemAttrs: designAttrs,
		gridItemTitle: design.name,
		gridItemImage: '/' + assets.imagesDir + '/designs/' + design.img,
		gridItemPermalink: designPermalink,
		gridCoverlink: false,
		gridItemContent: designLinks,
		gridItemLazyImage: loop.index >= 8,
		gridItemImageDecorator: designVariant
	} %}
{% endfor %}
</div>

<script>
{% set designsFilter %}
(function() {
	let hashIndicator = 'filter:';
	let initialHash = window.location.hash.slice(1);
	let items = [].slice.call(document.querySelectorAll('[data-tags]'));
	let list = document.querySelector('[data-filtered-list]');
	let tagList = [].slice.call(document.querySelectorAll('.filtering-item'));

	function resetItem(item) {
		item.style.width = '';
		item.style.height = '';
		item.removeAttribute('data-first');
		item.removeAttribute('data-shown-from-to');
		item.getAnimations().forEach((anim) => anim.cancel());
	}

	function filterTo(filter, skipAnim = false) {
		let isShowAll = (filter === '');
		let prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
		
		// Don't animate in certain conditions
		if (skipAnim || prefersReducedMotion || !Element.prototype.animate) {
			items.forEach(function(item) {
				let tags = item.getAttribute('data-tags').split(',');
				let isShown = (tags.indexOf(filter) > -1) || isShowAll;
				item.setAttribute('aria-hidden', (!isShown).toString());
			});
			return;
		}

		const animateOptions = {
			duration: 500,
			easing: getComputedStyle(items[0]).transitionTimingFunction || 'ease-in-out',
		};
		const listGeometry = list.getBoundingClientRect();
		list.style.setProperty('--t', `${animateOptions.duration}ms`); // Sync up with CSS

		// First, capture the initial state
		items.forEach(function(item) {
			resetItem(item); // Reset if triggered mid-animation
			const tags = item.getAttribute('data-tags').split(',');
			const wasShown = item.getAttribute('aria-hidden') === 'false';
			const isShown = (tags.indexOf(filter) > -1) || isShowAll;
			const first = item.getBoundingClientRect();
			item.setAttribute('data-first', JSON.stringify(first));
			item.setAttribute('data-shown-from-to', `${wasShown?1:0},${isShown?1:0}`);
		});

		// Then apply the change so all objects can calculate their new geometry after the change (taking sibling position into account)
		items.forEach(function(item,i) {
			const shown = item.getAttribute('data-shown-from-to').split(',').map((i) => parseInt(i,10));
			const isShown = shown[1] === 1;
			item.setAttribute('aria-hidden', (!isShown).toString());
		});

		// Finally, grab the new geometry for all items and apply animation
		items.forEach(function(item,i) {
			const shown = item.getAttribute('data-shown-from-to').split(',').map((i) => parseInt(i,10));
			const wasShown = shown[0] === 1;
			const isShown = shown[1] === 1;
			const first = JSON.parse(item.getAttribute('data-first'));
			const last = item.getBoundingClientRect();
			const keyframeFrom = {};
			const keyframeTo = {};

			// Determine keyframes for each config
			if (wasShown && isShown) { // Move
				keyframeFrom.transform = `translate(${first.left - last.left}px, ${first.top - last.top}px)`;
				//keyframeFrom.width = `${first.width}px`;
				//keyframeFrom.height = `${first.height}px`;
				keyframeTo.transform = `translate(0, 0)`;
				//keyframeTo.width = `${last.width}px`;
				//keyframeTo.height = `${last.height}px`;
			} else if (wasShown && !isShown) { // Hide
				keyframeFrom.transform = `translate(${first.left - listGeometry.left}px, ${first.top - listGeometry.top}px) scale(1)`;
				keyframeFrom.opacity = '1';
				keyframeFrom.width = `${first.width}px`;
				keyframeFrom.height = `${first.height}px`;
				keyframeTo.transform = `translate(${first.left - listGeometry.left}px, ${first.top - listGeometry.top}px) scale(0)`;
				keyframeTo.opacity = '0';
				keyframeTo.width = `${first.width}px`;
				keyframeTo.height = `${first.height}px`;
			} else if (!wasShown && isShown) { // Reveal
				keyframeFrom.transform = `translate(${first.left - listGeometry.left}px, ${first.top - listGeometry.top}px) scale(0)`;
				keyframeFrom.opacity = '0';
				keyframeFrom.width = `${last.width}px`;
				keyframeFrom.height = `${last.height}px`;
				keyframeTo.transform = `translate(0, 0) scale(1)`;
				keyframeTo.opacity = '1';
				keyframeTo.width = `${last.width}px`;
				keyframeTo.height = `${last.height}px`;
			} else if (!wasShown && !isShown) { // Stay hidden
				keyframeFrom.transform = `scale(0)`;
				keyframeTo.transform = `scale(0)`;
			}

			const anim = item.animate([keyframeFrom, keyframeTo], animateOptions);
			anim.addEventListener('finish', (e) => resetItem(item));
		});

		history.replaceState(undefined, '', filter ? ('#' + hashIndicator + filter) : '#');
	}

	if (initialHash.indexOf(hashIndicator) === 0) {
		let baseFilter = initialHash.slice(hashIndicator.length);
		let filterSelectBox = document.querySelector('#filter-' + (baseFilter || 'all'));
		if (!filterSelectBox) {
			baseFilter = '';
			filterSelectBox = document.querySelector('#filter-all');
		}
		filterSelectBox.checked = true;
		filterTo(baseFilter, true);
	}

	document.addEventListener('input', function(e) {
		let radio = e.target.closest('[name="filter"]');
		if (!radio) {
			return;
		}
		let filter = radio.value;
		filterTo(filter);
	});
})();
{% endset %}
{{- designsFilter | jsmin | safe -}}
</script>

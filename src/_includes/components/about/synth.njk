{% set notes = ['C','D','E','F','G','A','B'] %}
{% set octaves = 2 %}
{% set whitesPerOctave = 7 %}
{% set noteCount = (octaves * whitesPerOctave) + 1 %}
{% set keysStartX = 9.3 %}
{% set keysStartY = 26.3 %}
{% set whiteKeyWidth = 186.12 / noteCount | round(4) %}
{% set blackKeyWidth = whiteKeyWidth * 2/3 | round(4) %}
{% set whiteKeyCount = octaves * whitesPerOctave %}

{% setAsync "synthMarkup" %}
<div class="flow">
    <div
        class="about-synth"
        aria-label="Synth"
    >
        <div class="about-synth-groups">
            <div class="about-synth-group about-synth-speaker-wrap" aria-hidden="true">
                <div class="about-synth-speaker"></div>
            </div>

            <div class="about-synth-group">
                <div class="about-synth-group-label" lang="en">WAVEFORM</div>
                <div class="about-synth-group-content">
                    <div class="about-synth-waveform-labels">
                        <button onclick="document.getElementById('synth-waveform').value=1" type="button" class="button-reset about-synth-waveform-button" data-synth-type="sinewave" data-about-action="synth-set-type" aria-label="Sinewave waveform" lang="en" disabled>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="12" viewBox="0 0 20 12"><path fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="M2,6s2-8,8,0,8,0,8,0"/></svg>
                        </button>

                        <button onclick="document.getElementById('synth-waveform').value=2" type="button" class="button-reset about-synth-waveform-button" data-synth-type="triangle" data-about-action="synth-set-type" aria-label="Triangle waveform" lang="en" disabled>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="12" viewBox="0 0 20 12"><path fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="m2 10 8-8 8 8"/></svg>
                        </button>

                        <button onclick="document.getElementById('synth-waveform').value=3" type="button" class="button-reset about-synth-waveform-button" data-synth-type="square" data-about-action="synth-set-type" aria-label="Square waveform" lang="en" disabled>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="12" viewBox="0 0 20 12"><path fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="M2 10V2h8v8h8V2"/></svg>
                        </button>

                        <button onclick="document.getElementById('synth-waveform').value=4" type="button" class="button-reset about-synth-waveform-button" data-synth-type="sawtooth" data-about-action="synth-set-type" aria-label="Sawtooth waveform" lang="en" disabled>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="12" viewBox="0 0 20 12"><path fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="M2 10V2l16 8V2"/></svg>
                        </button>
                    </div>
                    <div class="about-synth-slider-wrap">
                        <input class="about-synth-slider" type="range" min="1" max="4" step="1" id="synth-waveform" value="1" disabled>
                    </div>
                </div>
            </div>

            <div class="about-synth-group">
                <div class="about-synth-group-label">ADSR</div>
                <div class="about-synth-group-line">
                    <div class="about-synth-slider-wrap" data-dir="v">
                        <input class="about-synth-slider" type="range" min="0" max="10" step="1" value="0" disabled>
                    </div>
                    <div class="about-synth-slider-wrap" data-dir="v">
                        <input class="about-synth-slider" type="range" min="0" max="10" step="1" value="5" disabled>
                    </div>
                    <div class="about-synth-slider-wrap" data-dir="v">
                        <input class="about-synth-slider" type="range" min="0" max="10" step="1" value="8" disabled>
                    </div>
                    <div class="about-synth-slider-wrap" data-dir="v">
                        <input class="about-synth-slider" type="range" min="0" max="10" step="1" value="2" disabled>
                    </div>
                </div>
            </div>

            <div class="about-synth-branding">
                <div class="about-synth-branding-label">
                    <span>Chris&shy;tone</span>
                    <span>KN-92</span>
                </div>
                <div class="about-synth-branding-description">
                    Electronic Musical Instrument
                </div>
            </div>
        </div>

        <div class="about-synth-keys" style="--synth-white-keys: {{ whiteKeyCount + 1 }};">
            {% for w in range(0, noteCount) %}
                {% set noteIndex = w % 7 %}
                {% set note = notes[ noteIndex ] %}
                {% set octave = ((w / 7) | round(0, "floor")) + (1 if (noteIndex < 5) else 2) %}
                <button type="button" style="--synth-key-index: {{ w + 1 }}" class="button-reset about-synth-key" data-key="white" data-note="{{ note }}" data-octave="{{ octave }}" aria-label="{{ note }}{{ octave }}" aria-pressed="false" disabled>
                    <span class="about-synth-key-label"></span>
                </button>
            {% endfor %}
            
            {% for b in range(1, whiteKeyCount) %}
                {% set noteIndex = b % 7 - 1 %}
                {% set note = notes[ noteIndex ] %}
                {% set octave = ((b / 7) | round(0, "floor")) + (1 if (noteIndex < 5) else 2) %}
                {% if b % 7 !== 0 and ((b + 4) % 7 !== 0) %}
                    <button type="button" style="--synth-key-index: {{ b + 1 }}" class="button-reset about-synth-key" data-key="black" data-note="{{ note }}#" data-octave="{{ octave }}" aria-label="{{ note }}#{{ octave }}" aria-pressed="false" disabled>
                        <span class="about-synth-key-label"></span>
                    </button>
                {% endif %}
            {% endfor %}
        </div>
    </div>

    <div class="about-synth-instructions">
        <fieldset class="toggleswitch">
            <label class="toggleswitch-label" for="about-synth-keyboard-layout-switch">
                {{ 'page.synth.keyboardMode' | i18n }}{{ 'grammar.punctSp' |i18n }}:
            </label>
            
            <span class="toggleswitch-value" data-value="false">QWERTY</span>
            <span class="toggleswitch-toggle">
                <input type="checkbox" role="switch" aria-checked="{% if lang == 'fr' %}true{% else %}false{% endif %}" {% if lang == 'fr' %}checked{% endif %} class="toggleswitch-checkbox" id="about-synth-keyboard-layout-switch">

                <label class="toggleswitch-back" aria-hidden="true" for="about-synth-keyboard-layout-switch">
                    <span class="toggleswitch-thumb"></span>
                </label>
            </span>
            <span class="toggleswitch-value" data-value="true">AZERTY</span>
        </fieldset>

        <p>
            {% svg "info", { class: 'inline-icon' } %}
            {{ 'page.synth.instructions' | i18n | safe }}
        </p>
    </div>
</div>
{% endsetAsync %}
{{ synthMarkup | htmlmin | safe }}

<script>
{% set synthScript %}
(function(){
    /* Variables */
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const keyNoteMap = [
        { note: 'C', octave: 1, keyQwerty: 'A', keyAzerty: 'Q' },
        { note: 'C#', octave: 1, keyQwerty: 'W', keyAzerty: 'Z' },
        { note: 'D', octave: 1, keyQwerty: 'S', keyAzerty: 'S' },
        { note: 'D#', octave: 1, keyQwerty: 'E', keyAzerty: 'E' },
        { note: 'E', octave: 1, keyQwerty: 'D', keyAzerty: 'D' },
        { note: 'F', octave: 1, keyQwerty: 'F', keyAzerty: 'F' },
        { note: 'F#', octave: 1, keyQwerty: 'T', keyAzerty: 'T' },
        { note: 'G', octave: 1, keyQwerty: 'G', keyAzerty: 'G' },
        { note: 'G#', octave: 1, keyQwerty: 'Y', keyAzerty: 'Y' },
        { note: 'A', octave: 2, keyQwerty: 'H', keyAzerty: 'H' },
        { note: 'A#', octave: 2, keyQwerty: 'U', keyAzerty: 'U' },
        { note: 'B', octave: 2, keyQwerty: 'J', keyAzerty: 'J' },
        { note: 'C', octave: 2, keyQwerty: 'K', keyAzerty: 'K' },
    ];
    const pressedNotes = new Map();
    let clickedKey = '';
    let isAzerty = false;
    let isShiftPressed = false;

    /* Functions */
    function enableSynth() {
        Array.from(document.querySelectorAll('.about-synth-slider, .about-synth-waveform-button, .about-synth-key')).forEach((synthControl) => synthControl.disabled = false);
    }

    function getNoteByKey(key) {
        return keyNoteMap.find((mapped) => (isAzerty ? mapped.keyAzerty : mapped.keyQwerty) === key) || false;
    }

    function getKeyByNoteOctave(note, octave) {
        return keyNoteMap.find((mapped) => mapped.note === note && mapped.octave === parseInt(octave, 10)) || false;
    }

    function getKeyDataByKeyNote(keyNote) {
        const octave = keyNote.octave + (isShiftPressed ? 1 : 0);
        return {
            element: document.querySelector(`[data-note="${keyNote.note}"][data-octave="${octave}"]`),
            note: keyNote.note,
            octave: octave,
        };
    }

    function isKeyEventShift(e) {
        return e.key.toLowerCase() === 'shift';
    }

    function getSynthType() {
        const slider = document.getElementById('synth-waveform');
        switch (parseInt(slider.value, 10)) {
            default:
            case 1: { return 'sinewave'; }
            case 2: { return 'triangle'; }
            case 3: { return 'square'; }
            case 4: { return 'sawtooth'; }
        }
    }

    function setKeyboardLayout(forcedValue = null) {
        if (forcedValue && typeof forcedValue === 'boolean') {
            return isAzerty =forcedValue;
        }

        const cbox = document.getElementById('about-synth-keyboard-layout-switch');
        if (!cbox) { return; }
        isAzerty = cbox.checked;
        cbox.setAttribute('aria-checked', isAzerty.toString());
        return isAzerty;
    }

    function reLabelKeys() {
        const octaveShift = isShiftPressed ? 1 : 0;
        const keys = Array.from(document.querySelectorAll('[data-note]'));
        keys.forEach((key) => {
            const label = key.querySelector('.about-synth-key-label');
            const note = key.getAttribute('data-note');
            const octave = parseInt(key.getAttribute('data-octave'), 10);
            const keyNote = getKeyByNoteOctave(note, octave - octaveShift);
            if (!keyNote) { label.innerText = ''; return; }
            const keyPress = isAzerty ? keyNote.keyAzerty : keyNote.keyQwerty;
            label.innerText = keyPress;
        });
    }

    function getHz(note = 'A', octave = 4) {
        const A4 = 440;
        let N = 0;
        switch (note) {
            default:
            case 'A':
                N = 0;
                break;
            case 'A#':
            case 'Bb':
                N = 1;
                break;
            case 'B':
                N = 2;
                break;
            case 'C':
                N = 3;
                break;
            case 'C#':
            case 'Db':
                N = 4;
                break;
            case 'D':
                N = 5;
                break;
            case 'D#':
            case 'Eb':
                N = 6;
                break;
            case 'E':
                N = 7;
                break;
            case 'F':
                N = 8;
                break;
            case 'F#':
            case 'Gb':
                N = 9;
                break;
            case 'G':
                N = 10;
                break;
            case 'G#':
            case 'Ab':
                N = 11;
                break;
        }
        N += 12 * (octave - 4);
        return A4 * Math.pow(2, N / 12);
    }

    function playKey(key) {
        const type = getSynthType() || 'sinewave';
        const osc = audioContext.createOscillator();
        const noteGainNode = audioContext.createGain();
        noteGainNode.connect(audioContext.destination);

        const zeroGain = 0.00001;
        const maxGain = 0.5;
        const sustainedGain = 0.001;

        noteGainNode.gain.value = zeroGain;

        const setAttack = () => noteGainNode.gain.exponentialRampToValueAtTime(maxGain, audioContext.currentTime + 0.01);
        const setDecay = () => noteGainNode.gain.exponentialRampToValueAtTime(sustainedGain, audioContext.currentTime + 1);
        const setRelease = () => noteGainNode.gain.exponentialRampToValueAtTime(zeroGain, audioContext.currentTime + 2);

        setAttack();
        setDecay();
        setRelease();

        osc.connect(noteGainNode);
        osc.type = type;
        
        const octaveOffset =  1;
        const freq = getHz(key.note, (key.octave || 0) + octaveOffset);

        if (Number.isFinite(freq)) {
            osc.frequency.value = freq;
        }

        key.element.setAttribute('aria-pressed', 'true');
        pressedNotes.set(key, osc);
        pressedNotes.get(key).start();
    }

    function stopKey(key) {
        if (!key) {
            return;
        }

        key.element.setAttribute('aria-pressed', 'false');
        const osc = pressedNotes.get(key);

        if (osc) {
            setTimeout(() => {
                osc.stop();
            }, 2000);

            pressedNotes.delete(key);
        }
    }

    function triggerKey(element, note, octave) {
        let key = { element, note, octave };
        clickedKey = key;
        playKey(key);
    }

    /* Init */
    enableSynth();
    setKeyboardLayout();
    reLabelKeys();

    /* Event handlers */
    document.addEventListener('click', (e) => {
        const toggler = e.target.closest('.toggleswitch');
        if (!toggler) { return true; }

        const cbox = toggler.querySelector('.toggleswitch-checkbox');
        const label = e.target.closest('[data-value]');
        if (!label) { return true; }

        e.preventDefault();
        const forcedVal = label.getAttribute('data-value') === 'true';
        cbox.checked = forcedVal;

        return false;
    });

    document.addEventListener('change', (e) => {
        const cbox = e.target.closest('.toggleswitch-checkbox');
        if (!cbox) { return; }
        isAzerty = cbox.checked;
        cbox.setAttribute('aria-checked', isAzerty.toString());
        setKeyboardLayout(isAzerty);
        reLabelKeys();
    });

    document.addEventListener('keydown', (e) => {
        if (isKeyEventShift(e) || e.shiftKey) {
            isShiftPressed = true;
            reLabelKeys();
        }
    });

    document.addEventListener('keyup', (e) => {
        if (isKeyEventShift(e) || (!e.shiftKey && !isKeyEventShift(e))) {
            isShiftPressed = false;
            reLabelKeys();
        }
    });

    document.addEventListener('mousedown', (e) => {
            var element = e.target.closest('[data-note]');
            if (!element) {
                return;
            }
            e.preventDefault();
            triggerKey(element, element.getAttribute('data-note'), parseInt(element.getAttribute('data-octave'), 10));
            return false;
        },
        false
    );

    document.addEventListener('mouseup',
        () => {
            stopKey(clickedKey);
        },
        false
    );

    document.addEventListener('keydown', (e) => {
        const pressedKey = e.key.toUpperCase();

        // Keyboard shortcuts shouldn't get interrupted
        if (e.altKey || e.metaKey || e.ctrlKey) {
            return;
        }

        // If the user has a key focused and pressed either Enter or Space, play the focused note
        if (pressedKey === 'ENTER' || pressedKey === ' ') {
            const element = e.target.closest('[data-note]');
            if (!element) {
                return;
            }
            triggerKey(element, element.getAttribute('data-note'), parseInt(element.getAttribute('data-octave'), 10));
            return;
        }

        // Find the note associated with the keyboard key
        const keyNote = getNoteByKey(pressedKey);
        if (!keyNote) {
            return;
        }
        let key = getKeyDataByKeyNote(keyNote);
        clickedKey = key;
        playKey(key);
    });

    document.addEventListener('keyup', () => stopKey(clickedKey) && setTimeout(() => stopKey(clickedKey), 1), false);
})()
{% endset %}
{{ synthScript | jsmin | safe }}
</script>